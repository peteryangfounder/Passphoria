Include iostream header file
Include windows.h header file
Include vector header file
Include algorithm header file
Include string header file
Include map header file
Include cstdlib header file
Include ctime header file
Include fstream header file

Using standard namespace

Void function throwError with parameters (HANDLE hConsole, int colour):
	Call SetConsoleTextAttribute function with arguments (hConsole, 12)
	Output error message "\nERROR: Invalid entry. Please try again.\n" (end line)
	Call SetConsoleTextAttribute function with arguments (hConsole, colour)

Void function askAgain with parameters (HANDLE hConsole, string &answer, vector<string> options, int colour):
	While (options vector is empty):
		Set boolean variable isCorrectlyNumbered to true
		For (int i starting at 0; i less than the length of the user’s answer; i is incremented by 1):
			If (answer[i] is not equal to ‘0’ AND not equal to ‘1’ AND not equal to ‘2’):
				Set isCorrectlyNumbered to false
		
		If (NOT isCorrectlyNumbered OR answer length less than 1 OR answer length greater than 3):
			Call throwError function with arguments (hConsole, colour)
			Call getline function with arguments (cin, answer)
		Else:
			Return
	
	While (user answer is not in vector of possible answers):
		Call throwError function with arguments (hConsole, colour)
		Call getline function with arguments (cin, answer)

Void function fileToMap with parameters (map<string,string> &wordList, string file):
	Declare string variables line, key, value
	Construct ifstream object with name textFile, passing in argument file
	
	While (values from textFile can be read into key and value):
		Set wordList[key] equal to value
	
	Call close() method on textFile

Int function main with no parameters:
	Call PlaySound function with arguments ("soundtrack.wav", NULL, SND_FILENAME|SND_LOOP|SND_ASYNC)
	Call srand function, passing in time(0)
	Set handle hConsole equal to GetStdHandle(STD_OUTPUT_HANDLE)
	Initialize int variable textColour to 7
	Declare string variable userName
	Declare string variable userAnswer
	
	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "Welcome to Passphoria! We believe passphrases bring euphoria." (end line)
	Call SetConsoleTextAttribute function with arguments (hConsole, 12)
	Output "Copyright 2021. All Rights Reserved.\n" (end line)
	
	Call SetConsoleTextAttribute function with arguments (hConsole, 10)
	Output "HOW IT WORKS: The Basic Steps" (end line)
	Output "1. Enter 1 for Get Started, 0 for Exit" (end line)
	Output "2. Enter how many words you would like in your passphrase" (end line)
	Output "3. Confirm your passphrase" (end line)
	Output "4. There will be opportunities to customize your passphrase, so make sure to pay attention to the instructions!\n" (end line)

	Output "PRO TIP: Visit https://github.com/peteryangfounder/Passphoria for external documentation.\n" (end line)
	
	Call SetConsoleTextAttribute function with arguments (hConsole, 7)
	Output "Ready to begin?\n" (end line)
	Output "1 - Get Started" (end line)
	Output "0 - Exit\n" (end line)
	
	Call getline function with arguments (cin, userAnswer)
	
	Construct string vector, called options, passing in values “0” and “1”
	Call askAgain function with arguments (hConsole, userAnswer, options, textColour)

	If (userAnswer is “0”)
		Return 0
	
	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "\nYou\'re one step closer to generating a secure passphrase! But before we dive in, we want to give you a chance to customize your experience. Please configure the following settings.\n" (end line)
	
	Output "1. What text colour do you want?\n" (end line)
	Output "2 - Cyan" (end line)
	Output "1 - Magenta" (end line)
	Output "0 - Default\n" (end line)
	
	Call SetConsoleTextAttribute function with arguments (hConsole, 7)
	Call getline function with arguments (cin, userAnswer)
	
	Update options vector to only store values "0", "1", and "2"
	Call askAgain function with arguments (hConsole, userAnswer, options, textColour)

	Switch(integer version of userAnswer):
		Case 0:
			Update textColour to 7
			Break
		Case 1:
			Update textColour to 5
			Break
		Case 2:
			Update textColour to 3
			Break
		Default Case:
			Update textColour to 7

	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "\n2. Do you want to continue listening to music?\n" (end line)
	Output "1 - Yes" (end line)
	Output "0 - No\n" (end line)
	
	Call SetConsoleTextAttribute function with arguments (hConsole, textColour)
	Call getline function with arguments (cin, userAnswer)

	Update options vector to only store values "0" and "1"
	Call askAgain function with arguments (hConsole, userAnswer, options, textColour)

	If (userAnswer is "0")
		Call PlaySound function with arguments (NULL, 0, 0)
	
	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "\n3. What is your name? In other words, what should we call you?\n" (end line)

	Call SetConsoleTextAttribute function with arguments (hConsole, textColour)
	Call getline function with arguments (cin, userName)

	Construct map, called passphrase, with key as string and value as string
	
	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "\nAlright "<<userName<<", let\'s generate your passphrase. To make it as unique as possible, please answer the following questions.\n" (end line)

	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "1. How many words should your passphrase be? Please enter a number between 6-10.\n" (end line)

	Call SetConsoleTextAttribute function with arguments (hConsole, textColour)
	Call getline function with arguments (cin, userAnswer)

	Update options vector to only store values "6", "7", "8", "9", and "10"
	Call askAgain function with arguments (hConsole, userAnswer, options, textColour)

	Set passphrase["length"] to userAnswer

	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "\n2. How many spaces should separate each word? Please enter a number between 1-5.\n" (end line)

	Call SetConsoleTextAttribute function with arguments (hConsole, textColour)
	Call getline function with arguments (cin, userAnswer)

	Update options vector to only store values "1", "2", "3", "4", and "5"
	Call askAgain function with arguments (hConsole, userAnswer, options, textColour)

	Set passphrase["spacing"] to string(integer version of userAnswer, ' ')

	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "\n3. How would you like your passphrase capitalized?\n" (end line)
	Output "1 - Lowercase" (end line)
	Output "0 - Uppercase\n" (end line)

	Call SetConsoleTextAttribute function with arguments (hConsole, textColour)
	Call getline function with arguments (cin, userAnswer)

	Update options vector to only store values "0" and "1"
	Call askAgain function with arguments (hConsole, userAnswer, options, textColour)

	Set passphrase["capitalization"] to userAnswer

	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "\n4. What language(s) should your passphrase be in? For more than one language, simply type the numbers consecutively (e.g., 21 for English-Latin).\n" (end line)
	Output "2 - English" (end line)
	Output "1 - Latin" (end line)
	Output "0 - German\n" (end line)

	Call SetConsoleTextAttribute function with arguments (hConsole, textColour)
	Call getline function with arguments (cin, userAnswer)

	Call clear() method on options vector
	Call askAgain function with arguments (hConsole, userAnswer, options, textColour)

	Set passphrase["languages"] to userAnswer

	Construct map, called englishWordList, with key as string and value as string
	Construct map, called latinWordList, with key as string and value as string
	Construct map, called germanWordList, with key as string and value as string

	For (int i starting at 0; i less than the length of passphrase["languages"]; i is incremented by 1):
		If (string version of character at position i of passphrase["languages"] is equal to "2" AND englishWordList is empty):
			Call fileToMap function with arguments (englishWordList, "2.txt")
		Else if (string version of character at position i of passphrase["languages"] is equal to "1" AND latinWordList is empty):
			Call fileToMap function with arguments (latinWordList, "1.txt")
		Else if (string version of character at position i of passphrase["languages"] is equal to "0" AND germanWordList is empty):
			Call fileToMap function with arguments (germanWordList, "0.txt")

	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "\n5. Append a special character to the end of each word? (!, @, #, $, %)\n" (end line)
	Output "1 - Yes" (end line)
	Output "0 - No\n" (end line)

	Call SetConsoleTextAttribute function with arguments (hConsole, textColour)
	Call getline function with arguments (cin, userAnswer)

	Update options vector to only store values "0" and "1"
	Call askAgain function with arguments (hConsole, userAnswer, options, textColour)

	If (userAnswer is "1"):
		Set passphrase["specialChars"] to "!@#$%"
	Else:
		Set passphrase["specialChars"] to userAnswer

	Declare string variable userPassphrase
	Declare string variable randomCode

	For (int i starting at 0; i less than integer version of passphrase["length"]; i is incremented by 1):
		For (int i starting at 0; i less than 5; i is incremented by 1):
			Set randomCode equal to randomCode + string version of a random integer between 1 and 6

		Initialize int variable indexOfWordList to rand() modulo length of passphrase["languages"]
		Initialize string variable wordList to string version of character at position indexOfWordList of passphrase["languages"]

		If (wordList is "2"):
			Set userPassphrase equal to userPassphrase + englishWordList[randomCode]
		Else if (wordList is "1"):
			Set userPassphrase equal to userPassphrase + latinWordList[randomCode]
		Else if (wordList is "0"):
			Set userPassphrase equal to userPassphrase + germanWordList[randomCode]

		If (passphrase["specialChars"] is NOT equal to "0"):
			Initialize int variable randomIndex to rand() modulo length of passphrase["specialChars"]
			Update userPassphrase to userPassphrase + passphrase["specialChars"][randomIndex]

		If (current iteration is NOT equal to final iteration):
			Update userPassphrase to userPassphrase + passphrase["spacing"]

		Call clear() method on randomCode

	If (passphrase["capitalization"] is "0"):
		For (int i starting at 0; i less than length of userPassphrase; i is incremented by 1):
			Set userPassphrase at position i equal to uppercase version of itself

	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "\n"<<userName<<", your passphrase is: "
	Call SetConsoleTextAttribute function with arguments (hConsole, 15)
	Output userPassphrase

	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "\nPassphrase Strength: "

	If (length of userPassphrase is greater than/equal to 40):
		Call SetConsoleTextAttribute function with arguments (hConsole, 10)
		Output "EXCELLENT :)\n" (end line)
	Else if (length of userPassphrase is between 20 and 39 inclusive):
		Output "STRONG\n" (end line)
	Else:
		Call SetConsoleTextAttribute function with arguments (hConsole, 12)
		Output "WEAK :(\n" (end line)

	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "To confirm your passphrase, please take a moment to retype it below.\n" (end line)

	Call SetConsoleTextAttribute function with arguments (hConsole, textColour)
	Call getline function with arguments (cin, userAnswer)

	Update options vector to only store userPassphrase
	Call askAgain function with arguments (hConsole, userAnswer, options, textColour)

	Call SetConsoleTextAttribute function with arguments (hConsole, 14)
	Output "\nLooks good! Thank you for using Passphoria, and always remember to use a password/passphrase manager!" (end line)

	Return 0